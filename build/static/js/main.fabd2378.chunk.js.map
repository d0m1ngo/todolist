{"version":3,"sources":["rootReducer/rootReducer.js","Filter/Filter.js","Actions/ActionsApi.js","Actions/Actions.js","Input/Input.js","TodoItem/TodoItem.js","TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["rootReducer","state","action","type","Object","objectSpread","inputValue","newArr","todoArr","slice","findObj","filter","x","id","done","data","text","console","log","url","Filter","react_default","a","createElement","className","NavLink","to","Component","connect","value","dispatch","getState","returnInitialArr","fetch","then","response","json","catch","alert","Input","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleClick","e","inputChange","target","addItem","onChange","onClick","addTodo","obj","parseInt","Date","now","Math","random","headers","Accept","Content-Type","method","body","JSON","stringify","addItemToServer","TodoItem","update","handleChangeChk","handleDeleteButton","handleUpdateButton","handleCancelButton","hadleInputChange","handleSaveButton","updateTodoCheckBtn","deleteTodo","setState","updateDiv","todoClass","_this$props","data-id","defaultChecked","concat","deleteItemFromServer","patchItemOnServer","TodoList","item","itemsArr","map","src_TodoItem_TodoItem","key","App","src_Filter_Filter","src_Input_Input","src_TodoList_TodoList","match","Boolean","window","location","hostname","store","createStore","rootreducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","BrowserRouter","Route","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fabd2378.chunk.js","sourcesContent":["const rootReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return { ...state, inputValue: \"\" };\r\n    case \"CHECK_TODO\":\r\n      let newArr = state.todoArr.slice();\r\n      let findObj = newArr.filter(x => x.id === action.id);\r\n      findObj[0].done = !findObj[0].done;\r\n      return { ...state, todoArr: newArr };\r\n    case \"DELETE_TODO\":\r\n      return { ...state };\r\n    case \"UPDATE_TODO\":\r\n      return { ...state };\r\n    case \"GET_STATE\":\r\n      return { ...state, todoArr: action.data };\r\n    case \"INPUT_CHANGE\":\r\n      return { ...state, inputValue: action.text };\r\n    case \"SET_URL\":\r\n      console.log(action.url);\r\n      return { ...state };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./filter.css\";\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.inputValue\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getState: () => dispatch()\r\n});\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"filter\">\r\n        <NavLink to={\"All\"} className=\"filter__nav\">\r\n          All\r\n        </NavLink>\r\n        <NavLink to={\"Checked\"} className=\"filter__nav\">\r\n          Checked\r\n        </NavLink>\r\n        <NavLink to={\"Unchecked\"} className=\"filter__nav\">\r\n          Unchecked\r\n        </NavLink>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Filter);\r\n","import { getState, addTodo, deleteTodo, updatetodo } from \"./Actions.js\";\r\n\r\nexport const returnInitialArr = dispatch => {\r\n  fetch(\"/todo\")\r\n    .then(function(response) {\r\n      return response.json();\r\n    })\r\n    .then(function(data) {\r\n      dispatch(getState(data));\r\n    })\r\n    .catch(alert);\r\n};\r\n\r\nexport const addItemToServer = (data, dispatch) => {\r\n  let id = parseInt(Date.now() + Math.random());\r\n  let obj = {\r\n    id,\r\n    text: data,\r\n    done: false\r\n  };\r\n  fetch(\"/todo\", {\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    method: \"post\",\r\n    body: JSON.stringify(obj)\r\n  })\r\n    .then(function(response) {\r\n      dispatch(addTodo());\r\n      return response;\r\n    })\r\n    .then(function(data) {\r\n      returnInitialArr(dispatch);\r\n      console.log(data);\r\n    });\r\n};\r\n\r\nexport const deleteItemFromServer = (id, dispatch) => {\r\n  fetch(`/todo/${id}`, {\r\n    method: \"DELETE\"\r\n  })\r\n    .then(function(response) {\r\n      dispatch(deleteTodo());\r\n      return response;\r\n    })\r\n    .then(function(data) {\r\n      returnInitialArr(dispatch);\r\n      console.log(data);\r\n    });\r\n};\r\n\r\nexport const patchItemOnServer = (id, text, done, dispatch) => {\r\n  let obj = {\r\n    text: text,\r\n    done: done\r\n  };\r\n  fetch(`/todo/${id}`, {\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    method: \"PATCH\",\r\n    body: JSON.stringify(obj)\r\n  })\r\n    .then(function(response) {\r\n      return response;\r\n    })\r\n    .then(function(data) {\r\n      dispatch(updatetodo());\r\n      returnInitialArr(dispatch);\r\n      console.log(data);\r\n    });\r\n};\r\n","export const addTodo = () => {\r\n  return {\r\n    type: \"ADD_TODO\"\r\n  };\r\n};\r\n\r\nexport const checkTodo = id => {\r\n  return {\r\n    type: \"CHECK_TODO\",\r\n    id\r\n  };\r\n};\r\n\r\nexport const deleteTodo = () => {\r\n  return {\r\n    type: \"DELETE_TODO\"\r\n  };\r\n};\r\n\r\nexport const updatetodo = () => {\r\n  return {\r\n    type: \"UPDATE_TODO\"\r\n  };\r\n};\r\n\r\nexport const inputChange = text => {\r\n  return {\r\n    type: \"INPUT_CHANGE\",\r\n    text\r\n  };\r\n};\r\n\r\nexport const getState = data => {\r\n  return {\r\n    type: \"GET_STATE\",\r\n    data\r\n  };\r\n};\r\nexport const setUrl = url => {\r\n  return {\r\n    type: \"SET_URL\",\r\n    url\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./input.css\";\r\nimport { addTodo, inputChange } from \"../Actions/Actions\";\r\nimport { addItemToServer } from \"../Actions/ActionsApi\";\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.inputValue\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addTodo: () => dispatch(addTodo()),\r\n  inputChange: text => dispatch(inputChange(text)),\r\n  addItem: data => addItemToServer(data, dispatch)\r\n});\r\n\r\nclass Input extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.props.inputChange(e.target.value);\r\n  }\r\n  handleClick() {\r\n    this.props.addItem(this.props.value);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          className=\"input__input\"\r\n          onChange={this.handleChange}\r\n          value={this.props.value}\r\n        />\r\n        <button className=\"input__button\" onClick={this.handleClick}>\r\n          add todo\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Input);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./todoitem.css\";\r\nimport { checkTodo, deleteTodo, updatetodo } from \"../Actions/Actions\";\r\nimport { deleteItemFromServer, patchItemOnServer } from \"../Actions/ActionsApi\";\r\n\r\nconst mapStateToProps = state => {\r\n  return state;\r\n};\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteTodo: id => deleteItemFromServer(id, dispatch),\r\n  updateTodoCheckBtn: (id, text, done) =>\r\n    patchItemOnServer(id, text, done, dispatch)\r\n});\r\nclass TodoItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      update: false,\r\n      text: this.props.text\r\n    };\r\n    this.handleChangeChk = this.handleChangeChk.bind(this);\r\n    this.handleDeleteButton = this.handleDeleteButton.bind(this);\r\n    this.handleUpdateButton = this.handleUpdateButton.bind(this);\r\n    this.handleCancelButton = this.handleCancelButton.bind(this);\r\n    this.hadleInputChange = this.hadleInputChange.bind(this);\r\n    this.handleSaveButton = this.handleSaveButton.bind(this);\r\n  }\r\n\r\n  handleChangeChk() {\r\n    this.props.updateTodoCheckBtn(\r\n      this.props.id,\r\n      this.props.text,\r\n      !this.props.done\r\n    );\r\n  }\r\n  handleDeleteButton() {\r\n    this.props.deleteTodo(this.props.id);\r\n  }\r\n  handleUpdateButton() {\r\n    this.setState({ update: true });\r\n  }\r\n  handleCancelButton() {\r\n    this.setState({ update: false, text: this.props.text });\r\n  }\r\n  hadleInputChange(e) {\r\n    this.setState({ text: e.target.value });\r\n  }\r\n  handleSaveButton() {\r\n    this.props.updateTodoCheckBtn(\r\n      this.props.id,\r\n      this.state.text,\r\n      this.props.done\r\n    );\r\n    this.setState({ update: false, text: this.state.text });\r\n  }\r\n  render() {\r\n    let { id, text, done } = this.props;\r\n    let updateDiv;\r\n    let todoClass;\r\n\r\n    if (done) {\r\n      todoClass = \"todoitem__text todoitem__text--line\";\r\n    } else {\r\n      todoClass = \"todoitem__text\";\r\n    }\r\n    if (this.state.update) {\r\n      updateDiv = (\r\n        <div className=\"todoitem\" data-id={id}>\r\n          <input value={this.state.text} onChange={this.hadleInputChange} />\r\n          <button className=\"todoitem__button\" onClick={this.handleSaveButton}>\r\n            save\r\n          </button>\r\n          <button\r\n            className=\"todoitem__button\"\r\n            onClick={this.handleCancelButton}\r\n          >\r\n            cancel\r\n          </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      updateDiv = (\r\n        <div className=\"todoitem\" data-id={id}>\r\n          <p className={todoClass}>{text}</p>\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"todoitem__checkbox\"\r\n            defaultChecked={done}\r\n            onChange={this.handleChangeChk}\r\n          />\r\n          <button\r\n            className=\"todoitem__button todoitem_button__update\"\r\n            onClick={this.handleUpdateButton}\r\n          >\r\n            update\r\n          </button>\r\n          <button\r\n            className=\"todoitem__button\"\r\n            onClick={this.handleDeleteButton}\r\n          >\r\n            delete\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div>{updateDiv}</div>;\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoItem);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./todolist.css\";\r\nimport TodoItem from \"../TodoItem/TodoItem\";\r\n\r\nconst mapStateToProps = state => ({\r\n  todoArr: state.todoArr\r\n});\r\n\r\nclass TodoList extends Component {\r\n  render() {\r\n    console.log(this.props.filter);\r\n    let itemsArr = this.props.todoArr;\r\n    let item;\r\n    switch (this.props.filter) {\r\n      case \"/Unchecked\":\r\n        item = itemsArr.map(item => {\r\n          if (item.done === false) {\r\n            return (\r\n              <TodoItem\r\n                text={item.text}\r\n                done={item.done}\r\n                id={item.id}\r\n                key={item.id}\r\n              />\r\n            );\r\n          }\r\n        });\r\n        break;\r\n      case \"/Checked\":\r\n        item = itemsArr.map(item => {\r\n          if (item.done === true) {\r\n            return (\r\n              <TodoItem\r\n                text={item.text}\r\n                done={item.done}\r\n                id={item.id}\r\n                key={item.id}\r\n              />\r\n            );\r\n          }\r\n        });\r\n        break;\r\n      case \"/All\":\r\n        item = itemsArr.map(item => {\r\n          return (\r\n            <TodoItem\r\n              text={item.text}\r\n              done={item.done}\r\n              id={item.id}\r\n              key={item.id}\r\n            />\r\n          );\r\n        });\r\n        break;\r\n      default:\r\n        return \"Nothing\";\r\n    }\r\n    return <div className=\"todolist\">{item}</div>;\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TodoList);\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport Filter from \"./Filter/Filter\";\nimport Input from \"./Input/Input\";\nimport TodoList from \"./TodoList/TodoList\";\nimport { returnInitialArr } from \"./Actions/ActionsApi\";\n\nconst mapStateToProps = state => ({\n  value: state.inputValue\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getState: () => returnInitialArr(dispatch)\n});\n\nclass App extends Component {\n  componentWillMount() {\n    this.props.getState();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Filter />\n        <Input />\n        <TodoList filter={this.props.match.url} />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport rootreducer from \"./rootReducer/rootReducer\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst initialState = {\n  todoArr: [],\n  inputValue: \"\"\n};\n\nconst store = createStore(\n  rootreducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Route path=\"/:filter?\" component={App} />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}